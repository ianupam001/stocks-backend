generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  email            String?          @unique
  phone            String           @unique
  name             String?
  roles            UserRole[]       @default([USER])
  password         String?
  refreshToken     String?
  isActive         Boolean          @default(true)
  totpSecret       String?
  isTwoFAEnabled   Boolean          @default(false)
  currentIp        String?
  currentSessionId String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  FeatureRequest   FeatureRequest[]
}

model StockData {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  ticker       String
  date         DateTime
  time         String
  ltp          Float
  buyPrice     Float
  buyQty       Int
  sellPrice    Float
  sellQty      Int
  ltq          Int
  openInterest Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model StockMetadata {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  FINCODE        String?
  SCRIPCODE      String   @unique
  SCRIP_NAME     String
  SCRIP_GROUP    String?
  COMPNAME       String
  IND_CODE       String?
  industry       String?
  HSE_CODE       String?
  house          String?
  SYMBOL         String
  SERIES         String?
  ISIN           String?
  S_NAME         String?
  RFORMAT        String?
  FFORMAT        String?
  CHAIRMAN       String?
  MDIR           String?
  COSEC          String?
  INC_MONTH      String?
  INC_YEAR       String?
  FV             String?
  Status         String?
  Sublisting     String?
  Bse_Scrip_ID   String?
  securitytoken  String?
  CIN            String?
  Bse_sublisting String?
  Nse_sublisting String?
  FLAG           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relation to RealTimeStockData
  realTimeStockData RealTimeStockData?
}

model RealTimeStockData {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  FINCODE    String?
  SCRIPCODE  String   @unique
  OPEN       Float?
  CLOSE      Float?
  HIGH       Float?
  LOW        Float?
  BIDPRICE   Float?
  OFFERPRICE Float?
  BIDQTY     Int?
  OFFERQTY   Int?
  VOLUME     Int?
  VALUE      Float?
  UPDTIME    DateTime
  createdAt  DateTime @default(now())

  // Relation to StockMetadata
  stockMetadata StockMetadata? @relation(fields: [SCRIPCODE], references: [SCRIPCODE])
}

model FeatureRequest {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  user        User                 @relation(fields: [userId], references: [id])
  userId      String               @db.ObjectId
  title       String
  description String
  status      FeatureRequestStatus @default(PENDING)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

enum FeatureRequestStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  COMPLETED
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}
